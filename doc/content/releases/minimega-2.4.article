minimega 2.4 release notes

* Introduction

The minimega team is pleased to announce the release of minimega 2.4. This
release includes improvements to make experiments more portable, an effort that
started in 2.3, and numerous bug fixes. This release contains changes to the
existing API which will improve user experience and programmability.

* What's new

** Major changes and milestones

*** namespaces

In 2.3, we introduced namespaces as the first step towards more portable
experiments. In 2.4, we have refactored namespaces to be more comprehensive.
minimega is now always in a namespace -- `minimega` by default. All state
associated with the namespace (e.g. VMs, taps, captures, VNC) is now
automatically cleaned up when it is destroyed.

As part of this refactor, we have made several APIs work properly with
namespaces. Specifically, there is now a separate `vm`config` per namespace.
`vm`config`clone` and `vm`config`qemu-override` now work with namespaces. There
is also a separate `router` and `cc` instances per namespace (including a
separate `cc`filter` and `cc`prefix`).

One notable change is that `miniccc_responses` are now separated by namespace.
Each namespace includes its own command-and-control server that writes to a
separate directory. This addresses an issue with clients having the same UUIDs
in different namespaces (before, they would have written responses to the same
directory).

*** Scheduler

The scheduler has been vastly improved in this release. In 2.3, we did
round-robin scheduling to distribute VMs across hosts. Now, the scheduler
attempts to load balance based on CPU, memory, or network commit. There are
also two new APIs to fine-tune the scheduler: `vm`config`schedule` and
`vm`config`coschedule`. See the [[/articles/namespaces.article][namespaces]]
article for details.

*** ns API

The `ns` API replaces `nsmod` to configure the active namespace. See `help`ns`
for more information.

We added `ns`run` to run a command on all nodes in the namespace.

*** cc listen API

To support above changes to `cc`, we removed the `-ccport` flag and replaced it
with the `cc`listen` API. This runs on all hosts in the namespace.

*** cc log level API

Added new API to change miniccc's log level at runtime: `cc`log`level`.

It uses the value of `cc`filter` to determine which VMs to update.

*** capture API

The `capture` API was rewritten and is now much more stable than before. We
have used it with thousands of captures without crashing.

Added new APIs to configure the snaplen and BPF for new PCAP captures. Added
new APIs to configure ASCII or Raw and compression for new netflow captures.
Simplified the `capture`netflow` API to use the stored configuration rather
than pass it in the command.

*** router API

Added `router`<vm>`gw` API to set the routers default gateway.

*** container VCPUs

Containers had a VCPUs parameter but no CPU limit was actually enforced. Now,
we use the `cpu` cgroup to set a quota on processing time for the container
based on the value of `vm`config`vcpus`.

*** containers

minimega now creates `/proc`, `/dev`, `/dev/shm`, `/dev/pts`, `/sys` in the
container filesystem if they do not exist. Solved an issue where containers
would fail to start.

*** vm top API

Added `vm`top` API to inspect resources that VMs and containers are actively
using.

*** vm info API

Moved the `bandwidth` column to `vm`top`.

Added an `uptime` column for the time since the VM was launched. Added `pid`
column for QEMU process for VMs and for init process for containers.

*** vm config volume API

Added `vm`config`volume` API to specify additional directories to mount into
the container's filesystem.

*** vm config backchannel

Added `vm`config`backchannel` to control whether a network-less backchannel is
created for the VM/container or not. Solved an issue where some VMs only
recognized one virtio port.

This defaults to true so existing scripts do not need to change.

*** vm cdrom API

`vm`cdrom` can now address one or more VMs using the same syntax as `vm`start`.
This allows users to add or remove disks for multiple VMs in one command.

Modified the QEMU arguments so that VMs have an empty CD device by default.
This allows users to add a CD to all VMs, not just ones that were launched with
a CD in `vm`config`cdrom`.

*** vm hotplug API

Similarly to the `vm`cdrom` API, `vm`hotplug` now supports addressing one or
more VMs using the syntax from `vm`start`.

`vm`hotplug` also now includes an optional parameter to specify the USB bus to
connect the device to -- either 1.1 or 2.0.

Renamed `vm`hotplug`show` to `vm`hotplug`. To limit results to a particular VM,
use `.filter`.

*** miniweb

Split the webserver that would run as part of minimega with the `web` API into
a separate binary -- miniweb. This binary has all the same functions as the old
`web` API but is implemented in a much more maintainable way. Added the
following functionality:

 - `vm`top` view
 - Per-path authentication
 - TLS support

Improved the container's web console so that multiple users can view the same
console at the same time. minimega also stores some "scrollback" from the
container's console, so when a new console connects it can re-play recent
output rather than presenting a blank screen.

*** host API

Added many new columns to support the scheduler. See `help`host` for details.

*** clear all API

Added `clear`all` API to reset minimega to a vanilla state. Restarting is still
preferred.

*** Completion over `-attach`

minimega now completes commands when using the `-attach` interface.

*** Completion

Added completion for namespace, tap, and bridge names in supporting APIs.

*** vlans file

minimega now writes out the VLAN mappings to the filesystem.

*** Header uniformity

Updated the headers on several API to make them easier to use with `.columns`
and `.filter`:

 - `bridge`
 - `capture`
 - `cc`
 - `debug`
 - `disk`
 - `dnsmasq`
 - `file status`
 - `mesh status`
 - `optimize`
 - `vm hotplug`
 - `vm tag`

All column names should now be one word and lowercase.

*** vyatta API

Removed deprecated API.

*** Readline replacement

Replaced the GNU Readline library in minimega with a pure Go implementation,
eliminating a C dependency. Users may notice slightly different behaviors
between the implementations.

*** igor

igor has had a significant overhaul. It now performs scheduling, rather that
just reservation. Users specify how many nodes they need and for how long; igor
looks through its schedule to find a time when it has enough nodes available
and reserves them then. When the reservation starts, igor will copy in the boot
files as usual. It can now also reboot nodes automatically when the reservation
starts (if desired), and has experimental support to put each reservation in a
different Q-in-Q (802.1ad) network segment to avoid network conflicts. Users
can also make reservations at a specific time in the future rather than next
available, reserve specific nodes rather than the  next available, or ask igor
to show them some available reservation slots without actually creating a
reservation.

*** passwordify

Added utility modify credentials for a ramdisk image.

* Bug fixes

** bandwidth on VMs

There was a bug where the bandwidth statistics were reversed (Rx and Tx were
swapped). Changed to a weighted moving average to show changes in transfer
rates faster.

** qos API

Use tbf instead of netem for rate limiting since netem does not seem to behave
correctly between VMs on different hosts. Unfortunately, this means that rate
and loss/delay are mutually exclusive now.

** Restarting miniccc

In 2.3, miniccc added support to set upstream tags using a UDS. This socket was
not properly cleaned up and would prevent miniccc from restarting if the VM
reboots. Changed miniccc so that it deletes the UDS if it does not detect that
there is an instance on miniccc running.

* Availability

minimega is available in several ways, both as pre-built distributions and
source. See the [[/articles/installing.article][installing]] guide for more
information.

** Debian package

minimega is available as an x86-64 debian package, available
[[https://storage.googleapis.com/minimega-files/minimega-2.4.deb][here]]. It is
known to work in debian 7 (wheezy) and 8 (testing/jessie) and ubuntu 16.04.

** tarball

A pre-built, x86-64 distribution is available in a single distributable tarball
[[https://storage.googleapis.com/minimega-files/minimega-2.4.tar.bz2][here]].
It should be sufficient to simply unpack the tarball and run tools from the
`bin/` directory directly. Most default paths in minimega, vmbetter, and other
tools are built to be used in this way (i.e. `bin/minimega`, which will then
look for the web directory in `misc/web`).

** Building from source

Source of the entire distribution is available on
[[https://github.com/sandia-minimega/minimega][github]]. Follow the directions
for cloning or forking minimega on github.com. In order to build minimega, you
will need a Go 1.8+ compiler, libreadline, and libpcap headers.
