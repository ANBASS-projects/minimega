minimega API

Auto-generated by apigen
Last updated 25 February 2015

* Introduction

This document contains an automatically generated form of the minimega command API help text. The same help text (minus some examples included here) is available in minimega by using the `help` command. You can get specific help on a minimega command by using `help <command>`.

* Builtins

Builtins are commands that impact how responses to commands are rendered. Some builtins impact how data is displayed, such as `.csv` and `.json`, while other impact what data is displayed, such as `.columns`. All builtins are stackable, meaning you can issue one-line commands by suffixing a builtin with a command or another builtin.


** .csv

 .csv [true,false]
 .csv <true,false> (command)

Enable or disable CSV mode. Enabling CSV mode disables JSON mode, if enabled.


** .json

 .json [true,false]
 .json <true,false> (command)

Enable or disable JSON mode. Enabling JSON mode disables CSV mode, if enabled.


** .headers

 .headers [true,false]
 .headers <true,false> (command)

Enable or disable headers for tabular data.


** .annotate

 .annotate [true,false]
 .annotate <true,false> (command)

Enable or disable hostname annotation for responses.


** .sort

 .sort [true,false]
 .sort <true,false> (command)

Enable or disable sorting of tabular data based on the value in the first
column. Sorting is based on string comparison.


** .compress

 .compress [true,false]
 .compress <true,false> (command)

Enable or disable output compression of like output from multiple responses.
For example, if you executed a command using mesh, such as:

	mesh send node[0-9] version

You would expect to get the same minimega version for all 10 nodes. Rather than
print out the same version 10 times, minicli with compression enabled would print:

	node[0-9]: minimega <version>

Assuming that all the minimega instances are running the same version. If one node was running
a different version or has an error, compression is still useful:

	node[0-4,6-9]: minimega <version>
	node5: minimega <version>

Or,

	node[0-3,9]: minimega <version>
	node[4-8]: Error: <error>

Compression is not applied when the output mode is JSON.


** .filter

 .filter <column=value> (command)

Filters tabular data based on the value in a particular column. For example, to
search for vms in a particular state:

	.filter state=running vm info

Filters are case insensitive and may be stacked:

	.filter state=running .filter vcpus=4 vm info


** .columns

 .columns <columns as csv> (command)

Filter tabular data using particular column names. For example, to only display
only the vm ID and state:

	.columns id,state vm info

Column names are comma-seperated. .columns can be used in conjunction with
.filter to slice a subset of the rows and columns from a command, however,
these commands are not always interchangeable. For example, the following is
acceptable:

	.columns id,state .filter vcpus=4 vm info

While the following is not:

	.filter vcpus=4 .columns id,state vm info

This is because .columns strips all columns except for ID and state from the
tabular data.

Note: the annotate flag controls the presence of the host column.



* Mesh Commands


** mesh degree

 mesh degree [degree]




** mesh dial

 mesh dial <hostname>




** mesh dot

 mesh dot <filename>

Output a graphviz formatted dot file representing the connected topology.


** mesh hangup

 mesh hangup <hostname>




** mesh list

 mesh list




** mesh status

 mesh status




** mesh timeout

 mesh timeout [timeout]

View or set the timeout on sending mesh commands.

When a mesh command is issued, if a response isn't sent within mesh_timeout
seconds, the command will be dropped and any future response will be discarded.
Note that this does not cancel the outstanding command - the node receiving the
command may still complete - but rather this node will stop waiting on a
response.


** mesh send

 mesh send <vms or all> (command)

Send a command to one or more connected clients. For example, to get the
vm info from nodes kn1 and kn2:

	mesh send kn[1-2] vm info

You can use 'all' to send a command to all connected clients.



* VM Commands


** vm inject

 vm inject src <srcimg> <files like /path/to/src:/path/to/dst>...
 vm inject dst <dstimg> src <srcimg> <files like /path/to/src:/path/to/dst>...

Create a backed snapshot of a qcow2 image and injects one or more files into
the new snapshot.

src qcow image - the name of the qcow to use as the backing image file.

partition - The optional partition number in which the files should be
injected. Partition defaults to 1, but if multiple partitions exist and
partition is not explicitly specified, an error is thrown and files are not
injected.

dst qcow image name - The optional name of the snapshot image. This should be a
name only, if any extra path is specified, an error is thrown. This file will
be created at 'base'/files. A filename will be generated if this optional
parameter is omitted.

src file - The local file that should be injected onto the new qcow2 snapshot.

dst file - The path where src file should be injected in the new qcow2 snapshot.

If the src file or dst file contains spaces, use double quotes (" ") as in the
following example:

	vm inject src src.qc2 dst.qc2 "my file":"Program Files/my file"

Alternatively, when given a single argument, this command supplies the name of
the backing qcow image for a snapshot image.


** vm info

 vm info

Print information about VMs in tabular form. The .filter and .columns commands
can be used to subselect a set of rows and/or columns. See the help pages for
.filter and .columns, respectively, for their usage. Columns returned by VM
info include:

- id	    : the VM ID, as an integer
- host	    : the host that the VM is running on
- name	    : the VM name, if it exists
- state     : one of (building, running, paused, quit, error)
- memory    : allocated memory, in megabytes
- vcpus     : the number of allocated CPUs
- disk      : disk image
- initrd    : initrd image
- kernel    : kernel image
- cdrom     : cdrom image
- append    : kernel command line string
- bridge    : bridge name
- tap	    : tap name
- mac	    : mac address
- ip	    : IPv4 address
- ip6	    : IPv6 address
- vlan	    : vlan, as an integer
- uuid      : QEMU system uuid
- cc_active : whether cc is active
- tags      : any additional information attached to the VM

Examples:

Display a list of all IPs for all VMs:
	.columns ip,ip6 vm info

Display all information about VMs with the disk image foo.qc2:
	.filter disk=foo.qc2 vm info

Display all information about all VMs:
	vm info


** vm save

 vm save <name> <vm id or name or all>...

Saves the configuration of a running virtual machine or set of virtual machines
so that it/they can be restarted/recovered later, such as after a system crash.

If no VM name or ID is given, all VMs (including those in the quit and error
state) will be saved.

This command does not store the state of the virtual machine itself, only its
launch configuration.


** vm launch

 vm launch <name or count> [noblock,]

Launch virtual machines in a paused state, using the parameters defined leading
up to the launch command. Any changes to the VM parameters after launching will
have no effect on launched VMs.

If you supply a name instead of a number of VMs, one VM with that name will be
launched. You may also supply a range expression to launch VMs with a specific
naming scheme:

	vm launch foo[0-9]

The optional 'noblock' suffix forces minimega to return control of the command
line immediately instead of waiting on potential errors from launching the
VM(s). The user must check logs or error states from vm info.


** vm kill

 vm kill <vm id or name or all>

Kill a virtual machine by ID or name. Pass all to kill all virtual machines.


** vm start

 vm start <vm id or name or all> [quit,]

Start one or all paused virtual machines. Pass all to start all paused virtual
machines.

Calling vm start specifically on a quit VM will restart the VM. If the optional 'quit'
suffix is used with the wildcard, then all virtual machines in the paused *or* quit state
will be restarted.


** vm stop

 vm stop <vm id or name or all>

Stop one or all running virtual machines. Pass all to stop all running virtual
machines.

Calling stop will put VMs in a paused state. Start stopped VMs with vm start.


** vm flush

 vm flush

Discard information about VMs that have either quit or encountered an error.
This will remove any VMs with a state of "quit" or "error" from vm info. Names
of VMs that have been flushed may be reused.


** vm hotplug

 vm hotplug <show,> <vm id or name>
 vm hotplug <add,> <vm id or name> <filename>
 vm hotplug <remove,> <vm id or name> <disk id or all>

Add and remove USB drives to a launched VM.

To view currently attached media, call vm hotplug with the 'show' argument and
a VM ID or name. To add a device, use the 'add' argument followed by the VM ID
or name, and the name of the file to add. For example, to add foo.img to VM 5:

	vm hotplug add 5 foo.img

The add command will assign a disk ID, shown in vm hotplug show. To remove
media, use the 'remove' argument with the VM ID and the disk ID. For example,
to remove the drive added above, named 0:

	vm hotplug remove 5 0

To remove all hotplug devices, use ID * for the disk ID.


** vm net

 vm net <connect,> <vm id or name> <tap position> <bridge> <vlan>
 vm net <disconnect,> <vm id or name> <tap position>

Disconnect or move existing network connections on a running VM.

Network connections are indicated by their position in vm net (same order in vm
info) and are zero indexed. For example, to disconnect the first network
connection from a VM named vm-0 with 4 network connections:

	vm netmod disconnect vm-0 0

To disconnect the second connection:

	vm netmod disconnect vm-0 1

To move a connection, specify the new VLAN tag and bridge:

	vm netmod <vm name or id> 0 bridgeX 100


** vm qmp

 vm qmp <vm id or name> <qmp command>

Issue a JSON-encoded QMP command. This is a convenience function for accessing
the QMP socket of a VM via minimega. vm qmp takes two arguments, a VM ID or
name, and a JSON string, and returns the JSON encoded response. For example:

	minimega$ vm qmp 0 '{ "execute": "query-status" }'
	{"return":{"running":false,"singlestep":false,"status":"prelaunch"}}


** vm tag

 vm tag <vm id or name> <key> [value]

Display or set a tag for the specified VM.

Tags are key-value pairs. A VM can have any number of tags associated
with it. They can be used to attach additional information to a
virtual machine, for example specifying a VM "group", or the correct
rendering color for some external visualization tool.

To set a tag:

        vm tag <vm id or name> <key> [value]

To read a tag:

        vm tag <vm id or name> <key>

Tags are not displayed in "vm info" by default, as there may be many of them.


** vm cdrom

 vm cdrom <eject,> <vm id or name>
 vm cdrom <change,> <vm id or name> <path>

Eject or change an active VM's cdrom image.

Eject VM 0's cdrom:

        vm cdrom eject 0

Eject all VM cdroms:

        vm cdrom eject all

Change a VM to use a new ISO:

        vm cdrom change 0 /tmp/debian.iso

"vm change" implies that the current ISO will be ejected.


** vm config

 vm config
 vm config <save,> <name>
 vm config <restore,> [name]
 vm config <clone,> <vm id or name>

Display, save, or restore the current VM configuration.

To display the current configuration, call vm config with no arguments.

List the current saved configurations with 'vm config show'

To save a configuration:

	vm config save <config name>

To restore a configuration:

	vm config restore <config name>

To clone the configuration of an existing VM:

	vm config clone <vm name or id>

Calling clear vm config will clear all VM configuration options, but will not
remove saved configurations.


** vm config qemu

 vm config qemu [path to qemu]




** vm config qemu-override

 vm config qemu-override
 vm config qemu-override add <match> <replacement>
 vm config qemu-override delete <id or all>

Override parts of the QEMU launch string by supplying a string to match, and a
replacement string.


** vm config qemu-append

 vm config qemu-append [argument]...

Add additional arguments to be passed to the QEMU instance. For example:
	vm config qemu-append -serial tcp:localhost:4001


** vm config memory

 vm config memory [memory in megabytes]

Set the amount of physical memory to allocate in megabytes.


** vm config vcpus

 vm config vcpus [number of CPUs]

Set the number of virtual CPUs to allocate for a VM.


** vm config disk

 vm config disk [path to disk image]...

Attach one or more disks to a vm. Any disk image supported by QEMU is a valid
parameter. Disk images launched in snapshot mode may safely be used for
multiple VMs.


** vm config cdrom

 vm config cdrom [path to cdrom image]

Attach a cdrom to a VM. When using a cdrom, it will automatically be set to be
the boot device.


** vm config kernel

 vm config kernel [path to kernel]

Attach a kernel image to a VM. If set, QEMU will boot from this image instead
of any disk image.


** vm config append

 vm config append [argument]...

Add an append string to a kernel set with vm kernel. Setting vm append without
using vm kernel will result in an error.

For example, to set a static IP for a linux VM:
	vm config append ip=10.0.0.5 gateway=10.0.0.1 netmask=255.255.255.0 dns=10.10.10.10


** vm config uuid

 vm config uuid [uuid]

Set the UUID for a virtual machine. If not set, minimega will create a random
one when the VM is launched.


** vm config net

 vm config net [netspec]...

Specify the network(s) that the VM is a member of by VLAN. A corresponding VLAN
will be created for each network. Optionally, you may specify the bridge the
interface will be connected on. If the bridge name is omitted, minimega will
use the default 'mega_bridge'. You can also optionally specify the mac address
of the interface to connect to that network. If not specifed, the mac address
will be randomly generated. Additionally, you can optionally specify a driver
for qemu to use. By default, e1000 is used.

Examples:

To connect a VM to VLANs 1 and 5:
	vm config net 1 5
To connect a VM to VLANs 100, 101, and 102 with specific mac addresses:
	vm config net 100,00:00:00:00:00:00 101,00:00:00:00:01:00 102,00:00:00:00:02:00
To connect a VM to VLAN 1 on bridge0 and VLAN 2 on bridge1:
	vm config net bridge0,1 bridge1,2
To connect a VM to VLAN 100 on bridge0 with a specific mac:
	vm config net bridge0,100,00:11:22:33:44:55
To specify a specific driver, such as i82559c:
	vm config net 100,i82559c

Calling vm net with no parameters will list the current networks for this VM.


** vm config snapshot

 vm config snapshot [true,false]

Enable or disable snapshot mode when using disk images. When enabled, disks
images will be loaded in memory when run and changes will not be saved. This
allows a single disk image to be used for many VMs.


** vm config initrd

 vm config initrd [path to initrd]

Attach an initrd image to a VM. Passed along with the kernel image at boot
time.


** clear vm config

 clear vm config
 clear vm config <append,>
 clear vm config <cdrom,>
 clear vm config <disk,>
 clear vm config <initrd,>
 clear vm config <kernel,>
 clear vm config <memory,>
 clear vm config <net,>
 clear vm config <qemu,>
 clear vm config <qemu-append,>
 clear vm config <qemu-override,>
 clear vm config <snapshot,>
 clear vm config <uuid,>
 clear vm config <vcpus,>

Resets the configuration for a provided field (or the whole configuration) back
to the default value.


** clear vm tag

 clear vm tag <vm id or name> [tag]

Clears one, many, or all tags from a virtual machine.

Clear the tag "foo" from VM 0:

        clear vm tag 0 foo

Clear the tag "foo" from all VMs:

        clear vm tag all foo

Clear all tags from VM 0:

        clear vm tag 0

Clear all tags from all VMs:

        clear vm tag all



* Host and Other Commands


** tap

 tap
 tap <create,> <vlan> [tap name]
 tap <create,> <vlan> bridge <bridge> [tap name]
 tap <create,> <vlan> <dhcp,> [tap name]
 tap <create,> <vlan> ip <ip> [tap name]
 tap <create,> <vlan> bridge <bridge> <dhcp,> [tap name]
 tap <create,> <vlan> bridge <bridge> ip <ip> [tap name]
 tap <delete,> <id or all>

Control host taps on a named vlan for communicating between a host and any VMs
on that vlan.

Calling tap with no arguments will list all created taps.

To create a tap on a particular vlan, invoke tap with the create command:

	tap create <vlan>

For example, to create a host tap with ip and netmask 10.0.0.1/24 on VLAN 5:

	tap create 5 ip 10.0.0.1/24

Optionally, you can specify the bridge to create the host tap on:

	tap create <vlan> bridge <bridge> ip <ip>

You can also optionally specify the tap name, otherwise the tap will be in the
form of mega_tapX.

Additionally, you can bring the tap up with DHCP by using "dhcp" instead of a
ip/netmask:

	tap create 5 dhcp

To delete a host tap, use the delete command and tap name from the tap list:

	tap delete <id>

To delete all host taps, use id all, or 'clear tap':

	tap delete all


** clear tap

 clear tap

Reset state for taps. See "help tap" for more information.


** bridge

 bridge




** capture

 capture
 capture <netflow,>
 capture <netflow,> <timeout,> [timeout]
 capture <netflow,> <bridge>
 capture <netflow,> <bridge> <file,> <filename>
 capture <netflow,> <bridge> <file,> <filename> <raw,ascii> [gzip]
 capture <netflow,> <bridge> <socket,> <tcp,udp> <hostname:port> <raw,ascii>
 capture <netflow,> <delete,> <id or all>
 capture <pcap,>
 capture <pcap,> bridge <bridge> <filename>
 capture <pcap,> vm <vm id or name> <interface index> <filename>
 capture <pcap,> <delete,> <id or all>

Capture experiment data including netflow and PCAP. Netflow capture obtains
netflow data from any local openvswitch switch, and can write to file, another
socket, or both. Netflow data can be written out in raw or ascii format, and
file output can be compressed on the fly. Multiple netflow writers can be
configured.

PCAP capture can be from a bridge or VM interface. No filters are applied, and
all data seen on that interface is captured to file.

For example, to capture netflow data on bridge mega_bridge to file in ascii
mode and with gzip compression:

	minimega$ capture netflow mega_bridge file foo.netflow ascii gzip

You can change the active flow timeout with:

	minimega$ capture netflow mega_bridge timeout <timeout>

With <timeout> in seconds.

To capture pcap on bridge 'foo' to file 'foo.pcap':

	minimega$ capture pcap bridge foo foo.pcap

To capture pcap on VM 'foo' to file 'foo.pcap', using the 2nd interface on that
VM:

	minimega$ capture pcap vm foo 0 foo.pcap


** clear capture

 clear capture [netflow,pcap]

Resets state for captures. See "help capture" for more information.


** cc

 cc
 cc <start,> [port]
 cc <serial,>
 cc <clients,>
 cc <prefix,> [prefix]
 cc <send,> <file>...
 cc <recv,> <file>...
 cc <exec,> <command>...
 cc <background,> <command>...
 cc <commands,>
 cc <filter,> [filter]...
 cc <responses,> <id or prefix or all> [raw,]
 cc <tunnel,> <uuid> <src port> <host> <dst port>
 cc <rtunnel,> <src port> <host> <dst port>
 cc <delete,> <command,> <id or prefix or all>
 cc <delete,> <response,> <id or prefix or all>

Command and control virtual machines running the miniccc client. Commands may
include regular commands, backgrounded commands, and any number of sent and/or
received files. Commands will be executed in command creation order. For
example, to send a file 'foo' and display the contents on a remote VM:

	cc send=foo
	cc exec="cat foo"

Files to be sent must be in the filepath directory, as set -filepath

Responses are organized in a structure within <filepath>/miniccc_responses, and
include subdirectories for each client response named by the client's UUID.
Responses can also be displayed on the command line with the 'responses'
command. 

Filters may be set to limit which clients may execute a posted command.  For
example, to filter on VMs that are running windows and have a specific IP.

	cc filter os=windows ip=10.0.0.1 

New commands assign any current filter.

You can also create TCP tunnels over the cc transport (virtio or network) by
using tunnel and rtunnel. Tunnels are created and behave like 'ssh -L' tunnels.


** clear cc

 clear cc
 clear cc <commands,>
 clear cc <filter,>
 clear cc <prefix,>
 clear cc <responses,>

Resets state for the command and control infrastructure provided by minimega.
See "help cc" for more information.


** dnsmasq

 dnsmasq
 dnsmasq start <listen address> <low dhcp range> <high dhcp range> [config]
 dnsmasq start <config>
 dnsmasq kill <id or all>

Start a dhcp/dns server on a specified IP with a specified range.  For example,
to start a DHCP server on IP 10.0.0.1 serving the range 10.0.0.2 -
10.0.254.254:

	dnsmasq start 10.0.0.1 10.0.0.2 10.0.254.254

To start only a from a config file:

	dnsmasq start /path/to/config

To list running dnsmasq servers, invoke dnsmasq with no arguments.  To kill a
running dnsmasq server, specify its ID from the list of running servers. For
example, to kill dnsmasq server 2:

	dnsmasq kill 2

To kill all running dnsmasq servers, pass all as the ID:

	dnsmasq kill all

dnsmasq will provide DNS service from the host, as well as from /etc/hosts. You
can specify an additional config file for dnsmasq by providing a file as an
additional argument.

	dnsmasq start 10.0.0.1 10.0.0.2 10.0.254.254 /tmp/dnsmasq-extra.conf

NOTE: If specifying an additional config file, you must provide the full path
to the file.


** viz

 viz <filename>

Output the current experiment topology as a graphviz readable 'dot' file.


** check

 check

Minimega maintains a list of external packages that it depends on, such as
qemu. Calling check will attempt to find each of these executables in the
avaiable path, and returns an error on the first one not found.


** history

 history




** clear history

 clear history

Reset the command history. See "help history" for more information.


** write

 write <file>

Write the command history to file. This is useful for handcrafting configs on
the minimega command line and then saving them for later use. Args that failed,
as well as some commands that do not impact the VM state, such as 'help', do
not get recorded.


** file

 file <list,> [path]
 file <get,> <file>
 file <delete,> <file>
 file <status,>

File allows you to transfer and manage files served by minimega in the
directory set by the -filepath flag (default is 'base'/files).

To list files currently being served, issue the list command with a directory
relative to the served directory:

	file list /foo

Issuing "file list /" will list the contents of the served directory.

Files can be deleted with the delete command:

	file delete /foo

If a directory is given, the directory will be recursively deleted.

Files are transferred using the get command. When a get command is issued, the
node will begin searching for a file matching the path and name within the
mesh. If the file exists, it will be transferred to the requesting node. If
multiple different files exist with the same name, the behavior is undefined.
When a file transfer begins, control will return to minimega while the transfer
completes.

To see files that are currently being transferred, use the status command:

	file status


** log level

 log level [debug,info,warn,error,fatal]

Set the log level to one of [debug, info, warn, error, fatal]. Log levels
inherit lower levels, so setting the level to error will also log fatal, and
setting the mode to debug will log everything.


** log stderr

 log stderr [true,false]

enable or disable logging to stderr


** log file

 log file [file]

Log to a file. To disable file logging, call "clear log file".


** clear log

 clear log
 clear log <file,>
 clear log <level,>
 clear log <stderr,>

Resets state for logging. See "help log ..." for more information.


** quit

 quit [delay]

Quit. An optional integer argument X allows deferring the quit call for X
seconds. This is useful for telling a mesh of minimega nodes to quit.

quit will not return a response to the cli, control socket, or meshage, it will
simply exit. meshage connected nodes catch this and will remove the quit node
from the mesh. External tools interfacing minimega must check for EOF on stdout
or the control socket as an indication that minimega has quit.


** help

 help [command]...

Show help on a command. If called with no arguments, show a summary of all
commands.


** read

 read <file>

Read a command file and execute it. This has the same behavior as if you typed
the file in manually.


** debug

 debug




** version

 version




** echo

 echo [args]...




** nuke

 nuke

After a crash, the VM state on the machine can be difficult to recover from.
Nuke attempts to kill all instances of QEMU, remove all taps and bridges, and
removes the temporary minimega state on the harddisk.


** optimize

 optimize
 optimize <ksm,> [true,false]
 optimize <hugepages,> [path]
 optimize <affinity,> [true,false]
 optimize <affinity,> filter <filter>

Enable or disable several virtualization optimizations, including Kernel
Samepage Merging, CPU affinity for VMs, and the use of hugepages.

To enable/disable Kernel Samepage Merging (KSM):
	optimize ksm [true,false]

To enable hugepage support:
	optimize hugepages </path/to/hugepages_mount>

To disable hugepage support:
	optimize hugepages ""

To enable/disable CPU affinity support:
	optimize affinity [true,false]

To set a CPU set filter for the affinity scheduler, for example (to use only
CPUs 1, 2-20):
	optimize affinity filter [1,2-20]

To clear a CPU set filter:
	optimize affinity filter

To view current CPU affinity mappings:
	optimize affinity

To disable all optimizations see "clear optimize".


** clear optimize

 clear optimize [affinity,]

Resets state for virtualization optimizations. See "help optimize" for more
information.


** shell

 shell <command>...

Execute a command under the credentials of the running user.

Commands run until they complete or error, so take care not to execute a command
that does not return.


** background

 background <command>...

Execute a command under the credentials of the running user.

Commands run in the background and control returns immediately. Any output is
logged.


** host

 host [name,]
 host [memused,]
 host [memtotal,]
 host [load,]
 host [bandwidth,]
 host [cpus,]




** vnc

 vnc
 vnc <kb,fb> <record,> <host> <vm id or name> <filename>
 vnc <kb,fb> <norecord,> <host> <vm id or name>
 vnc <playback,> <host> <vm id or name> <filename>
 vnc <noplayback,> <host> <vm id or name>

Record or playback keyboard and mouse events sent via the web interface to the
selected VM.

With no arguments, vnc will list currently recording or playing VNC sessions.

If record is selected, a file will be created containing a record of mouse and
keyboard actions by the user.

If playback is selected, the specified file (created using vnc record) will be
read and processed as a sequence of time-stamped mouse/keyboard events to send
to the specified VM.


** clear vnc

 clear vnc

Resets the state for VNC recordings. See "help vnc" for more information.


** vyatta

 vyatta
 vyatta <dhcp,>
 vyatta <dhcp,> add <network> <gateway or none> <low dhcp range> <high dhcp range> [dns server]
 vyatta <dhcp,> delete <network>
 vyatta <interfaces,> [net A.B.C.D/MASK or dhcp or none]...
 vyatta <interfaces6,> [net IPv6 address/MASK or none]...
 vyatta <rad,> [prefix]...
 vyatta <ospf,> [network]...
 vyatta <ospf3,> [network]...
 vyatta <routes,> [network and next-hop separated by comma]...
 vyatta <config,> [filename]
 vyatta <write,> [filename]

Define and write out vyatta router floppy disk images.

vyatta takes a number of subcommands:

- 'dhcp': Add DHCP service to a particular network by specifying the network,
default gateway, and start and stop addresses. For example, to serve dhcp on
10.0.0.0/24, with a default gateway of 10.0.0.1:

	vyatta dhcp add 10.0.0.0/24 10.0.0.1 10.0.0.2 10.0.0.254

An optional DNS argument can be used to override the nameserver. For example,
to do the same as above with a nameserver of 8.8.8.8:

	vyatta dhcp add 10.0.0.0/24 10.0.0.1 10.0.0.2 10.0.0.254 8.8.8.8

Optionally, you can specify "none" for the default gateway.

- 'interfaces': Add IPv4 addresses using CIDR notation. Optionally, 'dhcp' or
'none' may be specified. The order specified matches the order of VLANs used in
vm_net. This number of arguments must either be 0 or equal to the number of
arguments in 'interfaces6' For example:

	vyatta interfaces 10.0.0.1/24 dhcp

- 'interfaces6': Add IPv6 addresses similar to 'interfaces'. The number of
arguments must either be 0 or equal to the number of arguments in 'interfaces'.

- 'rad': Enable router advertisements for IPv6. Valid arguments are IPv6
prefixes or "none". Order matches that of interfaces6. For example:

	vyatta rad 2001::/64 2002::/64

- 'ospf': Route networks using OSPF. For example:

	vyatta ospf 10.0.0.0/24 12.0.0.0/24

- 'ospf3': Route IPv6 interfaces using OSPF3. For example:

	vyatta ospf3 eth0 eth1

- 'routes': Set static routes. Routes are specified as

	<network>,<next-hop> ...

For example:

	vyatta routes 2001::0/64,123::1 10.0.0.0/24,12.0.0.1

- 'config': Override all other options and use a specified file as the config
file. For example: vyatta config /tmp/myconfig.boot

- 'write': Write the current configuration to file. If a filename is omitted, a
random filename will be used and the file placed in the path specified by the
-filepath flag. The filename will be returned.


** clear vyatta

 clear vyatta

Resets state for vyatta. See "help vyatta" for more information.


** web

 web [port]
 web novnc <path to novnc> [port]

Launch a webserver that allows you to browse the connected minimega hosts and
VMs, and connect to any VM in the pool.

This command requires access to an installation of novnc. By default minimega
looks in 'pwd'/misc/novnc. To set a different path, invoke:

	web novnc <path to novnc>

To start the webserver on a specific port, issue the web command with the port:

	web 7000

9001 is the default port.




